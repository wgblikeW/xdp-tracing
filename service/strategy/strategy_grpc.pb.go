// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: strategy.proto

package strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StrategyClient is the client API for Strategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyClient interface {
	InstallStrategy(ctx context.Context, in *UpdateStrategy, opts ...grpc.CallOption) (*UpdateStrategyReply, error)
	RevokeStrategy(ctx context.Context, in *UpdateStrategy, opts ...grpc.CallOption) (*UpdateStrategyReply, error)
}

type strategyClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyClient(cc grpc.ClientConnInterface) StrategyClient {
	return &strategyClient{cc}
}

func (c *strategyClient) InstallStrategy(ctx context.Context, in *UpdateStrategy, opts ...grpc.CallOption) (*UpdateStrategyReply, error) {
	out := new(UpdateStrategyReply)
	err := c.cc.Invoke(ctx, "/strategy.Strategy/InstallStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyClient) RevokeStrategy(ctx context.Context, in *UpdateStrategy, opts ...grpc.CallOption) (*UpdateStrategyReply, error) {
	out := new(UpdateStrategyReply)
	err := c.cc.Invoke(ctx, "/strategy.Strategy/RevokeStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyServer is the server API for Strategy service.
// All implementations must embed UnimplementedStrategyServer
// for forward compatibility
type StrategyServer interface {
	InstallStrategy(context.Context, *UpdateStrategy) (*UpdateStrategyReply, error)
	RevokeStrategy(context.Context, *UpdateStrategy) (*UpdateStrategyReply, error)
	mustEmbedUnimplementedStrategyServer()
}

// UnimplementedStrategyServer must be embedded to have forward compatible implementations.
type UnimplementedStrategyServer struct {
}

func (UnimplementedStrategyServer) InstallStrategy(context.Context, *UpdateStrategy) (*UpdateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallStrategy not implemented")
}
func (UnimplementedStrategyServer) RevokeStrategy(context.Context, *UpdateStrategy) (*UpdateStrategyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeStrategy not implemented")
}
func (UnimplementedStrategyServer) mustEmbedUnimplementedStrategyServer() {}

// UnsafeStrategyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyServer will
// result in compilation errors.
type UnsafeStrategyServer interface {
	mustEmbedUnimplementedStrategyServer()
}

func RegisterStrategyServer(s grpc.ServiceRegistrar, srv StrategyServer) {
	s.RegisterService(&Strategy_ServiceDesc, srv)
}

func _Strategy_InstallStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).InstallStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.Strategy/InstallStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).InstallStrategy(ctx, req.(*UpdateStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strategy_RevokeStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).RevokeStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.Strategy/RevokeStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).RevokeStrategy(ctx, req.(*UpdateStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

// Strategy_ServiceDesc is the grpc.ServiceDesc for Strategy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strategy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strategy.Strategy",
	HandlerType: (*StrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallStrategy",
			Handler:    _Strategy_InstallStrategy_Handler,
		},
		{
			MethodName: "RevokeStrategy",
			Handler:    _Strategy_RevokeStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy.proto",
}
